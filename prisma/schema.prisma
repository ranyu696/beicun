// 数据库配置
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
// Prisma Client 生成器配置
generator client {
  provider = "prisma-client-js"
}
 
// 用户模型
model User {
  id            String          @id @default(cuid())
  name          String?         // 用户名
  email         String          @unique // 邮箱(唯一)
  password      String?         // 密码
  emailVerified DateTime?       // 邮箱验证时间
  verificationToken String?   @unique // 邮箱验证令牌
  resetToken        String?   @unique // 重置密码令牌
  resetTokenExpiry  DateTime? // 重置密码令牌过期时间
  image         String?         // 头像
  accounts      Account[]       // 关联的账号
  sessions      Session[]       // 会话
  role          UserRole        @default(USER) // 用户角色
  bio           String?         @db.Text // 个人简介
  ratings    ProductRating[] // 产品评分
  reviews    Review[]       // 测评文章
  comments   Comment[]      // 评论
  lastLoginAt   DateTime?       // 最后登录时间
  Authenticator Authenticator[] // 认证器
 
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt      // 更新时间
}
 
// 账号模型(用于第三方登录)
model Account {
  userId            String  // 用户ID
  type              String  // 账号类型
  provider          String  // 提供商
  providerAccountId String  // 提供商账号ID
  refresh_token     String? // 刷新令牌
  access_token      String? // 访问令牌
  expires_at        Int?    // 过期时间
  token_type        String? // 令牌类型
  scope             String? // 权限范围
  id_token          String? // ID令牌
  session_state     String? // 会话状态
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
// 会话模型
model Session {
  sessionToken String   @unique // 会话令牌
  userId       String   // 用户ID
  expires      DateTime // 过期时间
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 邮箱登录记录
model EmailLoginHistory {
  id        String   @id @default(cuid()) 
  email     String   // 邮箱地址
  success   Boolean  // 是否登录成功
  ipAddress String?  // IP地址
  userAgent String?  // 用户代理
  location  String?  // 登录地点

  createdAt DateTime @default(now())

  @@index([email])
}
// 验证令牌模型
model VerificationToken {
  identifier String   // 标识符
  token      String   // 令牌
  expires    DateTime // 过期时间
 
  @@id([identifier, token])
}
 
// WebAuthn认证器模型
model Authenticator {
  credentialID         String  @unique // 凭证ID
  userId               String  // 用户ID
  providerAccountId    String  // 提供商账号ID
  credentialPublicKey  String  // 凭证公钥
  counter              Int     // 计数器
  credentialDeviceType String  // 设备类型
  credentialBackedUp   Boolean // 是否备份
  transports           String? // 传输方式
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
// 刺激度枚举
enum StimulationLevel {
  LOW          // 低刺激
  MEDIUM       // 一般
  HIGH         // 高刺激
}

// 软硬度枚举
enum SoftnessLevel {
  ULTRA_SOFT   // 超软
  SOFT         // 软
  MEDIUM       // 一般
  HARD         // 硬
  ULTRA_HARD   // 超硬
}

// 紧致度枚举
enum TightnessLevel {
  TIGHT        // 紧
  MEDIUM       // 一般
  LOOSE        // 松
}

// 气味度/出油量枚举
enum Level {
  HIGH         // 大
  MEDIUM       // 一般
  LOW          // 小
}

model Product {
  id              String          @id @default(cuid())
  name            String          // 产品名称
  slug            String          @unique // URL友好的名称
  registrationDate DateTime       // 产品注册日期
  price           Float           // 价格
  height          Float           // 高度(mm)
  width           Float           // 宽度(mm)
  length          Float           // 长度(mm)
  channelLength   Float           // 通道长度(mm)
  totalLength     Float           // 整体长度(mm)
  weight          Float           // 重量(g)
  version         String          // 版本
  isReversible    Boolean         // 是否可翻洗
  stimulation     StimulationLevel // 刺激度
  softness        SoftnessLevel   // 软硬度
  tightness       TightnessLevel  // 紧致度
  smell           Level           // 气味度
  oiliness        Level           // 出油量
  description     String?         @db.Text // 其他说明
  taobaoUrl       String?         // 淘宝链接





  // 产品媒体
  mainImage       String          // 产品白底图
  salesImage      String          // 产品销售图
  videoUrl        String?         // 产品视频URL
  detailImages    String[]        // 官方详情图片
  ProductImage    ProductImage[]  // 产品详情图文介绍
  
  // 产品评分
  ratings         ProductRating[]
  averageRating   Float           @default(0)
  totalRatings    Int             @default(0)

  // 关联
    // 分类关联（改为引用分类表）
  productTypeId   String
  productType     ProductType     @relation(fields: [productTypeId], references: [id])
  
  channelTypeId   String
  channelType     ChannelType     @relation(fields: [channelTypeId], references: [id])
  
  brandId         String
  brand           Brand           @relation(fields: [brandId], references: [id])
  
  materialTypeId  String
  materialType    MaterialType    @relation(fields: [materialTypeId], references: [id])

  tags            ProductTag[]    // 产品标签
  reviews         Review[]        // 产品测评
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("products")
}

model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  imageUrl    String   // 图片URL
  description String?  @db.Text // 图片说明
  sortOrder   Int      // 排序顺序
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())

  @@map("product_images")
}

model ProductRating {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  rating      Float    // 评分 1-5
  reason      String?  @db.Text // 评分理由
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@map("product_ratings")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  logo        String?
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  website     String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)

  @@map("brands")
}
// 产品类型分类表
model ProductType {
  id          String    @id @default(cuid())
  name        String    @unique // 类型名称
  description String?   @db.Text // 类型描述
  products    Product[] // 关联产品
  sortOrder   Int       @default(0) // 排序顺序
  isActive    Boolean   @default(true) // 是否启用
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_types")
}

// 通道类型分类表
model ChannelType {
  id          String    @id @default(cuid())
  name        String    @unique // 类型名称
  description String?   @db.Text // 类型描述
  products    Product[] // 关联产品
  sortOrder   Int       @default(0) // 排序顺序
  isActive    Boolean   @default(true) // 是否启用
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("channel_types")
}

// 材料类型分类表
model MaterialType {
  id          String    @id @default(cuid())
  name        String    @unique // 类型名称
  description String?   @db.Text // 类型描述
  products    Product[] // 关联产品
  sortOrder   Int       @default(0) // 排序顺序
  isActive    Boolean   @default(true) // 是否启用
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("material_types")
}
model Review {
  id              String      @id @default(cuid())
  productId       String
  userId          String
  title           String
  status          ReviewStatus @default(PENDING)
  
  // 测评内容模块
  unboxing        String      @db.Text  // 开箱体验
  unboxingImages  String[]    // 开箱图片
  experience      String      @db.Text  // 使用感受
  maintenance     String      @db.Text  // 清洁与维护
  pros            String[]    // 优点列表
  cons            String[]    // 缺点列表
  conclusion      String      @db.Text  // 总结

  // 关联
  product         Product     @relation(fields: [productId], references: [id])
  author          User        @relation(fields: [userId], references: [id])
  comments        Comment[]   // 评论

  views           Int         @default(0)
  isRecommended   Boolean     @default(false)
  publishedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("reviews")
}

model Comment {
  id        String        @id @default(cuid())
  reviewId  String
  userId    String
  content   String        @db.Text
  status    CommentStatus @default(PENDING)
  review    Review        @relation(fields: [reviewId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("comments")
}



model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  products  ProductTag[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("tags")
}

model ProductTag {
  productId String
  tagId     String
  product   Product    @relation(fields: [productId], references: [id])
  tag       Tag        @relation(fields: [tagId], references: [id])
  createdAt DateTime   @default(now())

  @@id([productId, tagId])
  @@map("product_tags")
}

enum UserRole {
  USER   // 用户
  EDITOR // 编辑
  ADMIN  // 管理员
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}